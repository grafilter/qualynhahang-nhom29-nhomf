//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace QLNhaHang.App_data {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("BaoCao")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class BaoCao : global::System.Data.DataSet {
        
        private DTTheoThoiGianDataTable tableDTTheoThoiGian;
        
        private DTTheoKhuVucDataTable tableDTTheoKhuVuc;
        
        private DTTheoMonAnDataTable tableDTTheoMonAn;
        
        private HoaDonDataTable tableHoaDon;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BaoCao() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected BaoCao(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["DTTheoThoiGian"] != null)) {
                    base.Tables.Add(new DTTheoThoiGianDataTable(ds.Tables["DTTheoThoiGian"]));
                }
                if ((ds.Tables["DTTheoKhuVuc"] != null)) {
                    base.Tables.Add(new DTTheoKhuVucDataTable(ds.Tables["DTTheoKhuVuc"]));
                }
                if ((ds.Tables["DTTheoMonAn"] != null)) {
                    base.Tables.Add(new DTTheoMonAnDataTable(ds.Tables["DTTheoMonAn"]));
                }
                if ((ds.Tables["HoaDon"] != null)) {
                    base.Tables.Add(new HoaDonDataTable(ds.Tables["HoaDon"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DTTheoThoiGianDataTable DTTheoThoiGian {
            get {
                return this.tableDTTheoThoiGian;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DTTheoKhuVucDataTable DTTheoKhuVuc {
            get {
                return this.tableDTTheoKhuVuc;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DTTheoMonAnDataTable DTTheoMonAn {
            get {
                return this.tableDTTheoMonAn;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HoaDonDataTable HoaDon {
            get {
                return this.tableHoaDon;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            BaoCao cln = ((BaoCao)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DTTheoThoiGian"] != null)) {
                    base.Tables.Add(new DTTheoThoiGianDataTable(ds.Tables["DTTheoThoiGian"]));
                }
                if ((ds.Tables["DTTheoKhuVuc"] != null)) {
                    base.Tables.Add(new DTTheoKhuVucDataTable(ds.Tables["DTTheoKhuVuc"]));
                }
                if ((ds.Tables["DTTheoMonAn"] != null)) {
                    base.Tables.Add(new DTTheoMonAnDataTable(ds.Tables["DTTheoMonAn"]));
                }
                if ((ds.Tables["HoaDon"] != null)) {
                    base.Tables.Add(new HoaDonDataTable(ds.Tables["HoaDon"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDTTheoThoiGian = ((DTTheoThoiGianDataTable)(base.Tables["DTTheoThoiGian"]));
            if ((initTable == true)) {
                if ((this.tableDTTheoThoiGian != null)) {
                    this.tableDTTheoThoiGian.InitVars();
                }
            }
            this.tableDTTheoKhuVuc = ((DTTheoKhuVucDataTable)(base.Tables["DTTheoKhuVuc"]));
            if ((initTable == true)) {
                if ((this.tableDTTheoKhuVuc != null)) {
                    this.tableDTTheoKhuVuc.InitVars();
                }
            }
            this.tableDTTheoMonAn = ((DTTheoMonAnDataTable)(base.Tables["DTTheoMonAn"]));
            if ((initTable == true)) {
                if ((this.tableDTTheoMonAn != null)) {
                    this.tableDTTheoMonAn.InitVars();
                }
            }
            this.tableHoaDon = ((HoaDonDataTable)(base.Tables["HoaDon"]));
            if ((initTable == true)) {
                if ((this.tableHoaDon != null)) {
                    this.tableHoaDon.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "BaoCao";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/BaoCao.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDTTheoThoiGian = new DTTheoThoiGianDataTable();
            base.Tables.Add(this.tableDTTheoThoiGian);
            this.tableDTTheoKhuVuc = new DTTheoKhuVucDataTable();
            base.Tables.Add(this.tableDTTheoKhuVuc);
            this.tableDTTheoMonAn = new DTTheoMonAnDataTable();
            base.Tables.Add(this.tableDTTheoMonAn);
            this.tableHoaDon = new HoaDonDataTable();
            base.Tables.Add(this.tableHoaDon);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDTTheoThoiGian() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDTTheoKhuVuc() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDTTheoMonAn() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHoaDon() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            BaoCao ds = new BaoCao();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void DTTheoThoiGianRowChangeEventHandler(object sender, DTTheoThoiGianRowChangeEvent e);
        
        public delegate void DTTheoKhuVucRowChangeEventHandler(object sender, DTTheoKhuVucRowChangeEvent e);
        
        public delegate void DTTheoMonAnRowChangeEventHandler(object sender, DTTheoMonAnRowChangeEvent e);
        
        public delegate void HoaDonRowChangeEventHandler(object sender, HoaDonRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DTTheoThoiGianDataTable : global::System.Data.TypedTableBase<DTTheoThoiGianRow> {
            
            private global::System.Data.DataColumn columnThoiGian;
            
            private global::System.Data.DataColumn columnDoanhThu;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTTheoThoiGianDataTable() {
                this.TableName = "DTTheoThoiGian";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DTTheoThoiGianDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DTTheoThoiGianDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ThoiGianColumn {
                get {
                    return this.columnThoiGian;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DoanhThuColumn {
                get {
                    return this.columnDoanhThu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTTheoThoiGianRow this[int index] {
                get {
                    return ((DTTheoThoiGianRow)(this.Rows[index]));
                }
            }
            
            public event DTTheoThoiGianRowChangeEventHandler DTTheoThoiGianRowChanging;
            
            public event DTTheoThoiGianRowChangeEventHandler DTTheoThoiGianRowChanged;
            
            public event DTTheoThoiGianRowChangeEventHandler DTTheoThoiGianRowDeleting;
            
            public event DTTheoThoiGianRowChangeEventHandler DTTheoThoiGianRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDTTheoThoiGianRow(DTTheoThoiGianRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTTheoThoiGianRow AddDTTheoThoiGianRow(System.DateTime ThoiGian, double DoanhThu) {
                DTTheoThoiGianRow rowDTTheoThoiGianRow = ((DTTheoThoiGianRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ThoiGian,
                        DoanhThu};
                rowDTTheoThoiGianRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDTTheoThoiGianRow);
                return rowDTTheoThoiGianRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DTTheoThoiGianDataTable cln = ((DTTheoThoiGianDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DTTheoThoiGianDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnThoiGian = base.Columns["ThoiGian"];
                this.columnDoanhThu = base.Columns["DoanhThu"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnThoiGian = new global::System.Data.DataColumn("ThoiGian", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnThoiGian);
                this.columnDoanhThu = new global::System.Data.DataColumn("DoanhThu", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDoanhThu);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTTheoThoiGianRow NewDTTheoThoiGianRow() {
                return ((DTTheoThoiGianRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DTTheoThoiGianRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DTTheoThoiGianRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DTTheoThoiGianRowChanged != null)) {
                    this.DTTheoThoiGianRowChanged(this, new DTTheoThoiGianRowChangeEvent(((DTTheoThoiGianRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DTTheoThoiGianRowChanging != null)) {
                    this.DTTheoThoiGianRowChanging(this, new DTTheoThoiGianRowChangeEvent(((DTTheoThoiGianRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DTTheoThoiGianRowDeleted != null)) {
                    this.DTTheoThoiGianRowDeleted(this, new DTTheoThoiGianRowChangeEvent(((DTTheoThoiGianRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DTTheoThoiGianRowDeleting != null)) {
                    this.DTTheoThoiGianRowDeleting(this, new DTTheoThoiGianRowChangeEvent(((DTTheoThoiGianRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDTTheoThoiGianRow(DTTheoThoiGianRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BaoCao ds = new BaoCao();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DTTheoThoiGianDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DTTheoKhuVucDataTable : global::System.Data.TypedTableBase<DTTheoKhuVucRow> {
            
            private global::System.Data.DataColumn columnMaBan;
            
            private global::System.Data.DataColumn columnDoanhThu;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTTheoKhuVucDataTable() {
                this.TableName = "DTTheoKhuVuc";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DTTheoKhuVucDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DTTheoKhuVucDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaBanColumn {
                get {
                    return this.columnMaBan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DoanhThuColumn {
                get {
                    return this.columnDoanhThu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTTheoKhuVucRow this[int index] {
                get {
                    return ((DTTheoKhuVucRow)(this.Rows[index]));
                }
            }
            
            public event DTTheoKhuVucRowChangeEventHandler DTTheoKhuVucRowChanging;
            
            public event DTTheoKhuVucRowChangeEventHandler DTTheoKhuVucRowChanged;
            
            public event DTTheoKhuVucRowChangeEventHandler DTTheoKhuVucRowDeleting;
            
            public event DTTheoKhuVucRowChangeEventHandler DTTheoKhuVucRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDTTheoKhuVucRow(DTTheoKhuVucRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTTheoKhuVucRow AddDTTheoKhuVucRow(string MaBan, double DoanhThu) {
                DTTheoKhuVucRow rowDTTheoKhuVucRow = ((DTTheoKhuVucRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MaBan,
                        DoanhThu};
                rowDTTheoKhuVucRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDTTheoKhuVucRow);
                return rowDTTheoKhuVucRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DTTheoKhuVucDataTable cln = ((DTTheoKhuVucDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DTTheoKhuVucDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMaBan = base.Columns["MaBan"];
                this.columnDoanhThu = base.Columns["DoanhThu"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMaBan = new global::System.Data.DataColumn("MaBan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaBan);
                this.columnDoanhThu = new global::System.Data.DataColumn("DoanhThu", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDoanhThu);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTTheoKhuVucRow NewDTTheoKhuVucRow() {
                return ((DTTheoKhuVucRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DTTheoKhuVucRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DTTheoKhuVucRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DTTheoKhuVucRowChanged != null)) {
                    this.DTTheoKhuVucRowChanged(this, new DTTheoKhuVucRowChangeEvent(((DTTheoKhuVucRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DTTheoKhuVucRowChanging != null)) {
                    this.DTTheoKhuVucRowChanging(this, new DTTheoKhuVucRowChangeEvent(((DTTheoKhuVucRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DTTheoKhuVucRowDeleted != null)) {
                    this.DTTheoKhuVucRowDeleted(this, new DTTheoKhuVucRowChangeEvent(((DTTheoKhuVucRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DTTheoKhuVucRowDeleting != null)) {
                    this.DTTheoKhuVucRowDeleting(this, new DTTheoKhuVucRowChangeEvent(((DTTheoKhuVucRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDTTheoKhuVucRow(DTTheoKhuVucRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BaoCao ds = new BaoCao();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DTTheoKhuVucDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DTTheoMonAnDataTable : global::System.Data.TypedTableBase<DTTheoMonAnRow> {
            
            private global::System.Data.DataColumn columnTenThucDon;
            
            private global::System.Data.DataColumn columnDoanhThu;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTTheoMonAnDataTable() {
                this.TableName = "DTTheoMonAn";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DTTheoMonAnDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DTTheoMonAnDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TenThucDonColumn {
                get {
                    return this.columnTenThucDon;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DoanhThuColumn {
                get {
                    return this.columnDoanhThu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTTheoMonAnRow this[int index] {
                get {
                    return ((DTTheoMonAnRow)(this.Rows[index]));
                }
            }
            
            public event DTTheoMonAnRowChangeEventHandler DTTheoMonAnRowChanging;
            
            public event DTTheoMonAnRowChangeEventHandler DTTheoMonAnRowChanged;
            
            public event DTTheoMonAnRowChangeEventHandler DTTheoMonAnRowDeleting;
            
            public event DTTheoMonAnRowChangeEventHandler DTTheoMonAnRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDTTheoMonAnRow(DTTheoMonAnRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTTheoMonAnRow AddDTTheoMonAnRow(string TenThucDon, double DoanhThu) {
                DTTheoMonAnRow rowDTTheoMonAnRow = ((DTTheoMonAnRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TenThucDon,
                        DoanhThu};
                rowDTTheoMonAnRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDTTheoMonAnRow);
                return rowDTTheoMonAnRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DTTheoMonAnDataTable cln = ((DTTheoMonAnDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DTTheoMonAnDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTenThucDon = base.Columns["TenThucDon"];
                this.columnDoanhThu = base.Columns["DoanhThu"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTenThucDon = new global::System.Data.DataColumn("TenThucDon", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTenThucDon);
                this.columnDoanhThu = new global::System.Data.DataColumn("DoanhThu", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDoanhThu);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTTheoMonAnRow NewDTTheoMonAnRow() {
                return ((DTTheoMonAnRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DTTheoMonAnRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DTTheoMonAnRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DTTheoMonAnRowChanged != null)) {
                    this.DTTheoMonAnRowChanged(this, new DTTheoMonAnRowChangeEvent(((DTTheoMonAnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DTTheoMonAnRowChanging != null)) {
                    this.DTTheoMonAnRowChanging(this, new DTTheoMonAnRowChangeEvent(((DTTheoMonAnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DTTheoMonAnRowDeleted != null)) {
                    this.DTTheoMonAnRowDeleted(this, new DTTheoMonAnRowChangeEvent(((DTTheoMonAnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DTTheoMonAnRowDeleting != null)) {
                    this.DTTheoMonAnRowDeleting(this, new DTTheoMonAnRowChangeEvent(((DTTheoMonAnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDTTheoMonAnRow(DTTheoMonAnRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BaoCao ds = new BaoCao();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DTTheoMonAnDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HoaDonDataTable : global::System.Data.TypedTableBase<HoaDonRow> {
            
            private global::System.Data.DataColumn columnMaBan;
            
            private global::System.Data.DataColumn columnMaThucDon;
            
            private global::System.Data.DataColumn columnTenThucDon;
            
            private global::System.Data.DataColumn columnSoLuong;
            
            private global::System.Data.DataColumn columnDonGia;
            
            private global::System.Data.DataColumn columnThanhTien;
            
            private global::System.Data.DataColumn columnKhuyenMai;
            
            private global::System.Data.DataColumn columnTongTien;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HoaDonDataTable() {
                this.TableName = "HoaDon";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HoaDonDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HoaDonDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaBanColumn {
                get {
                    return this.columnMaBan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaThucDonColumn {
                get {
                    return this.columnMaThucDon;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TenThucDonColumn {
                get {
                    return this.columnTenThucDon;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SoLuongColumn {
                get {
                    return this.columnSoLuong;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DonGiaColumn {
                get {
                    return this.columnDonGia;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ThanhTienColumn {
                get {
                    return this.columnThanhTien;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KhuyenMaiColumn {
                get {
                    return this.columnKhuyenMai;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TongTienColumn {
                get {
                    return this.columnTongTien;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HoaDonRow this[int index] {
                get {
                    return ((HoaDonRow)(this.Rows[index]));
                }
            }
            
            public event HoaDonRowChangeEventHandler HoaDonRowChanging;
            
            public event HoaDonRowChangeEventHandler HoaDonRowChanged;
            
            public event HoaDonRowChangeEventHandler HoaDonRowDeleting;
            
            public event HoaDonRowChangeEventHandler HoaDonRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHoaDonRow(HoaDonRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HoaDonRow AddHoaDonRow(string MaBan, string MaThucDon, string TenThucDon, short SoLuong, double DonGia, double ThanhTien, short KhuyenMai, double TongTien) {
                HoaDonRow rowHoaDonRow = ((HoaDonRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MaBan,
                        MaThucDon,
                        TenThucDon,
                        SoLuong,
                        DonGia,
                        ThanhTien,
                        KhuyenMai,
                        TongTien};
                rowHoaDonRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHoaDonRow);
                return rowHoaDonRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HoaDonDataTable cln = ((HoaDonDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HoaDonDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMaBan = base.Columns["MaBan"];
                this.columnMaThucDon = base.Columns["MaThucDon"];
                this.columnTenThucDon = base.Columns["TenThucDon"];
                this.columnSoLuong = base.Columns["SoLuong"];
                this.columnDonGia = base.Columns["DonGia"];
                this.columnThanhTien = base.Columns["ThanhTien"];
                this.columnKhuyenMai = base.Columns["KhuyenMai"];
                this.columnTongTien = base.Columns["TongTien"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMaBan = new global::System.Data.DataColumn("MaBan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaBan);
                this.columnMaThucDon = new global::System.Data.DataColumn("MaThucDon", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaThucDon);
                this.columnTenThucDon = new global::System.Data.DataColumn("TenThucDon", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTenThucDon);
                this.columnSoLuong = new global::System.Data.DataColumn("SoLuong", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSoLuong);
                this.columnDonGia = new global::System.Data.DataColumn("DonGia", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDonGia);
                this.columnThanhTien = new global::System.Data.DataColumn("ThanhTien", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnThanhTien);
                this.columnKhuyenMai = new global::System.Data.DataColumn("KhuyenMai", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKhuyenMai);
                this.columnTongTien = new global::System.Data.DataColumn("TongTien", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTongTien);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HoaDonRow NewHoaDonRow() {
                return ((HoaDonRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HoaDonRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HoaDonRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HoaDonRowChanged != null)) {
                    this.HoaDonRowChanged(this, new HoaDonRowChangeEvent(((HoaDonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HoaDonRowChanging != null)) {
                    this.HoaDonRowChanging(this, new HoaDonRowChangeEvent(((HoaDonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HoaDonRowDeleted != null)) {
                    this.HoaDonRowDeleted(this, new HoaDonRowChangeEvent(((HoaDonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HoaDonRowDeleting != null)) {
                    this.HoaDonRowDeleting(this, new HoaDonRowChangeEvent(((HoaDonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHoaDonRow(HoaDonRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BaoCao ds = new BaoCao();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HoaDonDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DTTheoThoiGianRow : global::System.Data.DataRow {
            
            private DTTheoThoiGianDataTable tableDTTheoThoiGian;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DTTheoThoiGianRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDTTheoThoiGian = ((DTTheoThoiGianDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ThoiGian {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDTTheoThoiGian.ThoiGianColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ThoiGian\' in table \'DTTheoThoiGian\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDTTheoThoiGian.ThoiGianColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DoanhThu {
                get {
                    try {
                        return ((double)(this[this.tableDTTheoThoiGian.DoanhThuColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DoanhThu\' in table \'DTTheoThoiGian\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDTTheoThoiGian.DoanhThuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThoiGianNull() {
                return this.IsNull(this.tableDTTheoThoiGian.ThoiGianColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetThoiGianNull() {
                this[this.tableDTTheoThoiGian.ThoiGianColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDoanhThuNull() {
                return this.IsNull(this.tableDTTheoThoiGian.DoanhThuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDoanhThuNull() {
                this[this.tableDTTheoThoiGian.DoanhThuColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DTTheoKhuVucRow : global::System.Data.DataRow {
            
            private DTTheoKhuVucDataTable tableDTTheoKhuVuc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DTTheoKhuVucRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDTTheoKhuVuc = ((DTTheoKhuVucDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaBan {
                get {
                    try {
                        return ((string)(this[this.tableDTTheoKhuVuc.MaBanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaBan\' in table \'DTTheoKhuVuc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDTTheoKhuVuc.MaBanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DoanhThu {
                get {
                    try {
                        return ((double)(this[this.tableDTTheoKhuVuc.DoanhThuColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DoanhThu\' in table \'DTTheoKhuVuc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDTTheoKhuVuc.DoanhThuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaBanNull() {
                return this.IsNull(this.tableDTTheoKhuVuc.MaBanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaBanNull() {
                this[this.tableDTTheoKhuVuc.MaBanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDoanhThuNull() {
                return this.IsNull(this.tableDTTheoKhuVuc.DoanhThuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDoanhThuNull() {
                this[this.tableDTTheoKhuVuc.DoanhThuColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DTTheoMonAnRow : global::System.Data.DataRow {
            
            private DTTheoMonAnDataTable tableDTTheoMonAn;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DTTheoMonAnRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDTTheoMonAn = ((DTTheoMonAnDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TenThucDon {
                get {
                    try {
                        return ((string)(this[this.tableDTTheoMonAn.TenThucDonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TenThucDon\' in table \'DTTheoMonAn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDTTheoMonAn.TenThucDonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DoanhThu {
                get {
                    try {
                        return ((double)(this[this.tableDTTheoMonAn.DoanhThuColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DoanhThu\' in table \'DTTheoMonAn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDTTheoMonAn.DoanhThuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTenThucDonNull() {
                return this.IsNull(this.tableDTTheoMonAn.TenThucDonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTenThucDonNull() {
                this[this.tableDTTheoMonAn.TenThucDonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDoanhThuNull() {
                return this.IsNull(this.tableDTTheoMonAn.DoanhThuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDoanhThuNull() {
                this[this.tableDTTheoMonAn.DoanhThuColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HoaDonRow : global::System.Data.DataRow {
            
            private HoaDonDataTable tableHoaDon;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HoaDonRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHoaDon = ((HoaDonDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaBan {
                get {
                    try {
                        return ((string)(this[this.tableHoaDon.MaBanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaBan\' in table \'HoaDon\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHoaDon.MaBanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaThucDon {
                get {
                    try {
                        return ((string)(this[this.tableHoaDon.MaThucDonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaThucDon\' in table \'HoaDon\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHoaDon.MaThucDonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TenThucDon {
                get {
                    try {
                        return ((string)(this[this.tableHoaDon.TenThucDonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TenThucDon\' in table \'HoaDon\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHoaDon.TenThucDonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short SoLuong {
                get {
                    try {
                        return ((short)(this[this.tableHoaDon.SoLuongColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SoLuong\' in table \'HoaDon\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHoaDon.SoLuongColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DonGia {
                get {
                    try {
                        return ((double)(this[this.tableHoaDon.DonGiaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DonGia\' in table \'HoaDon\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHoaDon.DonGiaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ThanhTien {
                get {
                    try {
                        return ((double)(this[this.tableHoaDon.ThanhTienColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ThanhTien\' in table \'HoaDon\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHoaDon.ThanhTienColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short KhuyenMai {
                get {
                    try {
                        return ((short)(this[this.tableHoaDon.KhuyenMaiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KhuyenMai\' in table \'HoaDon\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHoaDon.KhuyenMaiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TongTien {
                get {
                    try {
                        return ((double)(this[this.tableHoaDon.TongTienColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TongTien\' in table \'HoaDon\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHoaDon.TongTienColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaBanNull() {
                return this.IsNull(this.tableHoaDon.MaBanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaBanNull() {
                this[this.tableHoaDon.MaBanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaThucDonNull() {
                return this.IsNull(this.tableHoaDon.MaThucDonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaThucDonNull() {
                this[this.tableHoaDon.MaThucDonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTenThucDonNull() {
                return this.IsNull(this.tableHoaDon.TenThucDonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTenThucDonNull() {
                this[this.tableHoaDon.TenThucDonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSoLuongNull() {
                return this.IsNull(this.tableHoaDon.SoLuongColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSoLuongNull() {
                this[this.tableHoaDon.SoLuongColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDonGiaNull() {
                return this.IsNull(this.tableHoaDon.DonGiaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDonGiaNull() {
                this[this.tableHoaDon.DonGiaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThanhTienNull() {
                return this.IsNull(this.tableHoaDon.ThanhTienColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetThanhTienNull() {
                this[this.tableHoaDon.ThanhTienColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKhuyenMaiNull() {
                return this.IsNull(this.tableHoaDon.KhuyenMaiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKhuyenMaiNull() {
                this[this.tableHoaDon.KhuyenMaiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTongTienNull() {
                return this.IsNull(this.tableHoaDon.TongTienColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTongTienNull() {
                this[this.tableHoaDon.TongTienColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DTTheoThoiGianRowChangeEvent : global::System.EventArgs {
            
            private DTTheoThoiGianRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTTheoThoiGianRowChangeEvent(DTTheoThoiGianRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTTheoThoiGianRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DTTheoKhuVucRowChangeEvent : global::System.EventArgs {
            
            private DTTheoKhuVucRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTTheoKhuVucRowChangeEvent(DTTheoKhuVucRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTTheoKhuVucRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DTTheoMonAnRowChangeEvent : global::System.EventArgs {
            
            private DTTheoMonAnRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTTheoMonAnRowChangeEvent(DTTheoMonAnRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DTTheoMonAnRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HoaDonRowChangeEvent : global::System.EventArgs {
            
            private HoaDonRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HoaDonRowChangeEvent(HoaDonRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HoaDonRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591